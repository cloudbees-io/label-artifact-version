apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Label artifact version'
description: 'Add or remove label(s) to an existing artifact version.'

inputs:
  artifact-id:
    description: 'The unique identifier of the artifact.'
    required: true
  labels:
    description: 'A comma-separated list of artifact labels. If the list is empty, and the operation is "REPLACE", all the existing labels will be removed.'
    required: true
  operation:
    description: 'The type of action to be performed with labels of an artifact. "ADD" and "REMOVE" are options available. "ADD" is used as default value.'
    default: ADD

runs:
  using: composite
  steps:
    - id: labelArtifactVersion
      name: Label Artifact Version
      uses: docker://esolang/jq:latest
      run: |
        # Set default operation to ADD if not provided
        OPERATION=${INPUT_OPERATION:-ADD}
        
        if [ "$OPERATION" = "ADD" ]; then

          # Use Python to split INPUT_LABELS by commas, but preserve commas and slashes that are escaped.
          # The regex (?:[^\\\\,]|\\\\.)+ matches either any character except backslash/comma or an escaped character.
          # After splitting, we unescape \, to comma and \\ to backslash.
          formatted_labels=$(
            python3 -c '
            import sys, re
            s = sys.argv[1]
            
            # Split string on unescaped commas
            labels = re.findall(r"(?:[^\\\\,]|\\\\.)+", s)
            
            # Unescape commas and backslashes
            labels = [l.replace("\\,", ",").replace("\\\\", "\\") for l in labels]
           
            # Each label is JSON quoted and joined with commas
            print(",".join([f"\\"{l}\\"" for l in labels]))
            ' "$INPUT_LABELS"
          )
        
          # Compose JSON payload for API POST
          echo "{ \"artifact_id\": \"${INPUT_ARTIFACT_ID}\", \"labels\": [${formatted_labels}] }" > /tmp/payload.json
        
          # POST request to add the given labels
          response=$(curl --fail-with-body -X 'POST' "$URL/v3/artifactinfos/$INPUT_ARTIFACT_ID/labels" \
          -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" \
          --data-binary '@/tmp/payload.json') || command_failed=1
          
          # Check if curl POST call failed and report error if so
          if [ ${command_failed:-0} -eq 1 ]; then
            echo "Platform API call failed with error: '$response'"
            exit 1
          fi
        
        else # REMOVE operation block
        
          # Helper function to URL-encode strings using Python
          urlencode() {
            python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]), end='')" "$1"
          }
        
          # Use Python again to split and unescape the label list
          labels_list=$(
            python3 -c '
            import sys, re
            s = sys.argv[1]
            
            # Split string on unescaped commas
            labels = re.findall(r"(?:[^\\\\,]|\\\\.)+", s)
            
            # Unescape commas and backslashes
            labels = [l.replace("\\,", ",").replace("\\\\", "\\") for l in labels]
            
            # Print each label on a new line
            print("\n".join([l for l in labels]))
            ' "$INPUT_LABELS"
          )
        
          # Construct query string for DELETE, URL-encoding each processed label
          label_query=""
          while IFS= read -r label; do
            encoded=$(urlencode "$label")
            if [ -n "$label_query" ]; then
              label_query="${label_query}&"
            fi
            label_query="${label_query}labels=${encoded}"
          done <<< "$labels_list"
        
          # DELETE request to remove given labels from artifact
          response=$(curl --fail-with-body -X 'DELETE' "$URL/v3/artifactinfos/$INPUT_ARTIFACT_ID/labels?$label_query" \
        -H "Authorization: Bearer $JWT" -H "Content-Type: application/json")
          if [ $? -ne 0 ]; then
          command_failed=1
          fi
        
          # Check if curl DELETE call failed and report error if so
          if [ ${command_failed:-0} -eq 1 ]; then
        echo "Platform API call failed with error: '$response'"
          exit 1
          fi
          
          fi
      env:
        JWT: ${{ cloudbees.api.token }}
        URL: ${{ cloudbees.api.url }}
        INPUT_ARTIFACT_ID: ${{ inputs.artifact-id }}
        INPUT_LABELS: ${{ inputs.labels }}
        INPUT_OPERATION: ${{ inputs.operation }}
