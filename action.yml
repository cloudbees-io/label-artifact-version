apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Label artifact version'
description: 'Add or remove label(s) to an existing artifact version.'

inputs:
  artifact-id:
    description: 'The unique identifier of the artifact.'
    required: true
  labels:
    description: 'A comma-separated list of artifact labels. If the list is empty, and the operation is "REPLACE", all the existing labels will be removed.'
    required: true
  operation:
    description: 'The type of action to be performed with labels of an artifact. "ADD" and "REMOVE" are options available. "ADD" is used as default value.'
    default: ADD

runs:
  using: composite
  steps:
    - id: labelArtifactVersion
      name: Label Artifact Version
      uses: docker://esolang/jq:latest
      run: |
        bash -c '
        
        # Set default operation to ADD if not provided
        OPERATION=${INPUT_OPERATION:-ADD}
        
        # Function to URL-encode a string
        urlencode() {
          python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]), end='')" "$1"
        }
        
         # --- Split on unescaped commas, retain whitespace ---
          labels=()
          buf=""
          escaped=0
          INPUT_LABELS="${INPUT_LABELS:-}"
          len="${#INPUT_LABELS}" 
        
          for ((i=0; i<$len; i++)); do
            ch="${INPUT_LABELS:i:1}"
            if [[ "$ch" == '\' ]]; then
              buf+="$ch"
              escaped=1
            elif [[ "$ch" == ',' && $escaped -ne 1 ]]; then
              labels+=("$buf")
              buf=""
              escaped=0
            else
              buf+="$ch"
              escaped=0
            fi
          done
          labels+=("$buf")
          
          if [[ "$OPERATION" == "ADD" ]]; then
            # --- Build JSON array ---
            formatted_labels=""
            for lbl in "${labels[@]}"; do
              lbl_escaped="${lbl//\"/\\\"}"
              if [[ -n "$formatted_labels" ]]; then
                formatted_labels+=","
              fi
              formatted_labels+="\"$lbl_escaped\""
            done
        
            # Compose JSON payload
            echo "{ \"artifact_id\": \"${INPUT_ARTIFACT_ID}\", \"labels\": [${formatted_labels}] }" > /tmp/payload.json

          # POST request to add labels
          response=$(curl --fail-with-body -X 'POST' "$URL/v3/artifactinfos/$INPUT_ARTIFACT_ID/labels" \
            -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" \
            --data-binary '@/tmp/payload.json') || command_failed=1
        
          # Check curl exit code
          if [ ${command_failed:-0} -eq 1 ]; then
            echo "Platform API call failed with error: '$response'"
            exit 1
          fi
        
        else # If operation is REMOVE
          
          # Build labels=...&labels=... query string for deletion
          label_query=""
          for label in "${labels[@]}"; do
            encoded=$(urlencode "$label")
            if [[ -n "$label_query" ]]; then
              label_query="${label_query}&"
            fi
            label_query="${label_query}labels=${encoded}"
          done
      
          echo "final label_query = $label_query"
          
          # DELETE request to remove labels
          response=$(curl --fail-with-body -X 'DELETE' "$URL/v3/artifactinfos/$INPUT_ARTIFACT_ID/labels?$label_query" \
           -H "Authorization: Bearer $JWT" -H "Content-Type: application/json") 
           if [ $? -ne 0 ]; then
             command_failed=1
           fi

         # Check curl exit code
         if [ ${command_failed:-0} -eq 1 ]; then
           echo "Platform API call failed with error: '$response'"
           exit 1
         fi
        fi
      env:
        JWT: ${{ cloudbees.api.token }}
        URL: ${{ cloudbees.api.url }}
        INPUT_ARTIFACT_ID: ${{ inputs.artifact-id }}
        INPUT_LABELS: ${{ inputs.labels }}
        INPUT_OPERATION: ${{ inputs.operation }}
